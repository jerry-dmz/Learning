;常量-----------------------------------------------------------------------------------

; G-D/B-L-AVL 4位
DA_32   equ 4000h       ;0100(G-D/B-L-AVL) 0000 0000(P-DPL-S) 0000(type)

; DPL 2位
DA_DPL1 equ 00h
DA_DPL2 equ 01h
DA_DPL3 equ 02h
DA_DPL4 equ 03h

;P-DPL-S 4位 type 4位

;代码段或数据段
DA_DR   equ 90h         ;1001 0000  存在的只读数据段
DA_DRW  equ 92h         ;1001 0010  存在的可读写数据段 
DA_DRWA equ 93h         ;1001 0011  已访问的存在的可读写数据段
DA_C    equ 98h         ;1001 1000  存在的只执行代码段
DA_CR   equ 9Ah         ;1001 1010  存在的可执行、可读代码段
DA_CCO  equ 9Ch         ;1001 1100  存在的只执行一致性代码段
DA_CCOR  equ 9Eh        ;1001 1110  存在的可执行、可读一致性代码段

;系统段
DA_LDT  equ 82h         ;1000 0010  局部描述符段
DA_TASK_GATE equ 85h    ;1000 0101  任务门
DA_TSS   equ 89h        ;1000 1001  tss
DA_CALL_GATE equ 8ch    ;1000 1100  调用门
DA_INTERUPT_GATE equ 8eh;1000 1110  中断门
DA_TRAP_GATE    equ 8Fh ;1000 1111  陷阱门



;常量-----------------------------------------------------------------------------------


;宏-------------------------------------------------------------------------------------


;由于历史问题，描述符结构有点乱，段基址（32位）、段界限（20）都被拆开了在加上属
;性占据的12位，一共8字节64位
;
;外部定义描述符时，肯定是希望简单些好。8字节从高到底分别是：
;段基址3（8位）   属性（2字节16位，其中4位段界限限） 段基址1+段基址2（24位分为16+8） 段界限1（16位）
;
;

;描述符
;usage: Descriptor Base, Limit, Atrr
;       Base: dd
;       Limit: dd（low 20bits available）
;       Atrr: dw(lower 4 bits of higher byte are always 0)
;此处还是《x86 从实模式到保护模式》的图更清楚些。
;此处描述符之所以是这样，是为了兼容以前的数据结构：
;刚开始8086实模式，基地址和界限都是16位（即低4字节），此时也只存储基址、界限
;后面某个版本有了段的概念，地址线也由20变成了更多位，只能在原基础上加的缘故。
;
;
%macro Descriptor 3
dw %2 & 0FFFFh  ;段界限1（16位） 取段界限的低16位
dw %1 & 0FFFFh  ;段基址1  取基址的低16位
db (%1 >> 16) & 0FFh    ;段基址2 取基址的中8位
dw ((%2 >> 8) & 0F00h)|(%3 & 0F0FFh);属性1 + 段界限2 + 属性2
db (%1 >> 24) & 0FFh                ;段基址3 取基址的高8位
%endmacro   ; 供8字节

;宏-------------------------------------------------------------------------------------